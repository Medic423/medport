generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  password          String
  name              String?
  role              UserRole           @default(COORDINATOR)
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  routes            Route[]
  transportRequests TransportRequest[]
  multiPatientTransports MultiPatientTransport[]
  longDistanceTransports LongDistanceTransport[]
}

model Facility {
  id                  String             @id @default(cuid())
  name                String
  type                FacilityType
  address             String
  city                String
  state               String
  zipCode             String
  coordinates         Json?
  phone               String?
  email               String?
  operatingHours      Json?
  capabilities        Json?
  isActive            Boolean            @default(true)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  distanceMatrixFrom  DistanceMatrix[]   @relation("FromFacility")
  distanceMatrixTo    DistanceMatrix[]   @relation("ToFacility")
  routeStops          RouteStop[]
  destinationRequests TransportRequest[] @relation("DestinationFacility")
  originRequests      TransportRequest[] @relation("OriginFacility")
  patientTransportOrigins PatientTransport[] @relation("PatientTransportOrigin")
  patientTransportDestinations PatientTransport[] @relation("PatientTransportDestination")
  transportLegOrigins TransportLeg[] @relation("TransportLegOrigin")
  transportLegDestinations TransportLeg[] @relation("TransportLegDestination")
}

model TransportRequest {
  id                     String           @id @default(cuid())
  patientId              String
  originFacilityId       String
  destinationFacilityId  String
  transportLevel         TransportLevel
  priority               Priority         @default(MEDIUM)
  status                 RequestStatus    @default(PENDING)
  specialRequirements    String?
  requestTimestamp       DateTime         @default(now())
  pickupTimestamp        DateTime?
  completionTimestamp    DateTime?
  assignedAgencyId       String?
  assignedUnitId         String?
  createdById            String
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  routeOptimizationScore Float?
  chainingOpportunities  Json?
  timeFlexibility        Int?
  revenuePotential       Float?
  routeStops             RouteStop[]
  assignedAgency         TransportAgency? @relation(fields: [assignedAgencyId], references: [id])
  assignedUnit           Unit?            @relation(fields: [assignedUnitId], references: [id])
  createdBy              User             @relation(fields: [createdById], references: [id])
  destinationFacility    Facility         @relation("DestinationFacility", fields: [destinationFacilityId], references: [id])
  originFacility         Facility         @relation("OriginFacility", fields: [originFacilityId], references: [id])
  routes                 Route[]          @relation("RouteToTransportRequest")
}

model TransportAgency {
  id                String             @id @default(cuid())
  name              String
  contactName       String?
  phone             String
  email             String
  address           String
  city              String
  state             String
  zipCode           String
  serviceArea       Json?
  operatingHours    Json?
  capabilities      Json?
  pricingStructure  Json?
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  routes            Route[]
  transportRequests TransportRequest[]
  units             Unit[]
  multiPatientTransports MultiPatientTransport[]
  longDistanceTransports LongDistanceTransport[]
}

model Unit {
  id                String             @id @default(cuid())
  agencyId          String
  unitNumber        String
  type              TransportLevel
  capabilities      Json?
  currentStatus     UnitStatus         @default(AVAILABLE)
  currentLocation   Json?
  shiftStart        DateTime?
  shiftEnd          DateTime?
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  routes            Route[]
  transportRequests TransportRequest[]
  multiPatientTransports MultiPatientTransport[]
  longDistanceTransports LongDistanceTransport[]
  agency            TransportAgency    @relation(fields: [agencyId], references: [id])
}

model DistanceMatrix {
  id                   String    @id @default(cuid())
  fromFacilityId       String
  toFacilityId         String
  distanceMiles        Float
  estimatedTimeMinutes Int
  trafficFactor        Float     @default(1.0)
  tolls                Float     @default(0.0)
  fuelEfficiency       Float?
  routeType            RouteType @default(FASTEST)
  lastUpdated          DateTime  @default(now())
  fromFacility         Facility  @relation("FromFacility", fields: [fromFacilityId], references: [id])
  toFacility           Facility  @relation("ToFacility", fields: [toFacilityId], references: [id])

  @@unique([fromFacilityId, toFacilityId])
}

model Route {
  id                       String                 @id @default(cuid())
  routeNumber              String                 @unique
  agencyId                 String
  assignedUnitId           String?
  status                   RouteStatus            @default(PLANNED)
  totalDistanceMiles       Float
  estimatedTimeMinutes     Int
  emptyMilesReduction      Float?
  revenueOptimizationScore Float?
  chainedTripCount         Int                    @default(0)
  estimatedRevenue         Float?
  plannedStartTime         DateTime?
  actualStartTime          DateTime?
  completionTime           DateTime?
  timeWindowStart          DateTime?
  timeWindowEnd            DateTime?
  optimizationType         RouteOptimizationType?
  milesSaved               Float?
  unitsSaved               Int?
  createdById              String
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  agency                   TransportAgency        @relation(fields: [agencyId], references: [id])
  assignedUnit             Unit?                  @relation(fields: [assignedUnitId], references: [id])
  createdBy                User                   @relation(fields: [createdById], references: [id])
  routeStops               RouteStop[]
  transportRequests        TransportRequest[]     @relation("RouteToTransportRequest")
}

model RouteStop {
  id                       String                @id @default(cuid())
  routeId                  String
  stopOrder                Int
  facilityId               String
  transportRequestId       String?
  multiPatientTransportId  String?
  stopType                 StopType
  estimatedArrival         DateTime?
  actualArrival            DateTime?
  estimatedDeparture       DateTime?
  actualDeparture          DateTime?
  stopDuration             Int?
  notes                    String?
  facility                 Facility              @relation(fields: [facilityId], references: [id])
  route                    Route                 @relation(fields: [routeId], references: [id])
  transportRequest         TransportRequest?     @relation(fields: [transportRequestId], references: [id])
  multiPatientTransport    MultiPatientTransport? @relation(fields: [multiPatientTransportId], references: [id])

  @@unique([routeId, stopOrder])
}

// Multi-Patient Transport Models
model MultiPatientTransport {
  id                   String                @id @default(cuid())
  batchNumber          String                @unique
  coordinatorId        String
  status               MultiPatientStatus    @default(PLANNING)
  totalPatients        Int
  totalDistance        Float
  estimatedDuration    Int
  plannedStartTime     DateTime
  plannedEndTime       DateTime
  assignedAgencyId     String?
  assignedUnitId       String?
  routeOptimizationScore Float?
  costSavings          Float?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  coordinator          User                  @relation(fields: [coordinatorId], references: [id])
  assignedAgency       TransportAgency?      @relation(fields: [assignedAgencyId], references: [id])
  assignedUnit         Unit?                 @relation(fields: [assignedUnitId], references: [id])
  patientTransports    PatientTransport[]
  routeStops           RouteStop[]
}

model PatientTransport {
  id                       String                  @id @default(cuid())
  multiPatientTransportId  String
  patientId                String
  originFacilityId         String
  destinationFacilityId    String
  transportLevel           TransportLevel
  priority                 Priority                @default(MEDIUM)
  specialRequirements      String?
  sequenceOrder            Int
  estimatedPickupTime      DateTime
  estimatedDropoffTime     DateTime
  actualPickupTime         DateTime?
  actualDropoffTime        DateTime?
  status                   PatientTransportStatus  @default(PENDING)
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  multiPatientTransport    MultiPatientTransport   @relation(fields: [multiPatientTransportId], references: [id])
  originFacility           Facility                @relation("PatientTransportOrigin", fields: [originFacilityId], references: [id])
  destinationFacility      Facility                @relation("PatientTransportDestination", fields: [destinationFacilityId], references: [id])
}

// Long-Distance Transport Models
model LongDistanceTransport {
  id                   String                @id @default(cuid())
  transportNumber      String                @unique
  coordinatorId        String
  status               LongDistanceStatus    @default(PLANNING)
  totalDistance        Float
  estimatedDuration    Int
  plannedStartTime     DateTime
  plannedEndTime       DateTime
  isMultiLeg           Boolean               @default(false)
  legCount             Int
  assignedAgencyId     String?
  assignedUnitId       String?
  costEstimate         Float
  revenuePotential     Float
  weatherConditions    Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  coordinator          User                  @relation(fields: [coordinatorId], references: [id])
  assignedAgency       TransportAgency?      @relation(fields: [assignedAgencyId], references: [id])
  assignedUnit         Unit?                 @relation(fields: [assignedUnitId], references: [id])
  transportLegs        TransportLeg[]
  weatherUpdates       WeatherUpdate[]
}

model TransportLeg {
  id                       String                @id @default(cuid())
  longDistanceTransportId  String
  legNumber                Int
  originFacilityId         String
  destinationFacilityId    String
  distance                 Float
  estimatedDuration        Int
  plannedStartTime         DateTime
  plannedEndTime           DateTime
  actualStartTime          DateTime?
  actualEndTime            DateTime?
  status                   LegStatus             @default(PLANNED)
  patientId                String?
  transportLevel           TransportLevel
  specialRequirements      String?
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  longDistanceTransport    LongDistanceTransport @relation(fields: [longDistanceTransportId], references: [id])
  originFacility           Facility              @relation("TransportLegOrigin", fields: [originFacilityId], references: [id])
  destinationFacility      Facility              @relation("TransportLegDestination", fields: [destinationFacilityId], references: [id])
}

model WeatherUpdate {
  id                       String                @id @default(cuid())
  longDistanceTransportId  String
  timestamp                DateTime              @default(now())
  conditions               Json
  impact                   String
  recommendations          String[]
  longDistanceTransport    LongDistanceTransport @relation(fields: [longDistanceTransportId], references: [id])
}

enum UserRole {
  ADMIN
  COORDINATOR
  BILLING_STAFF
  TRANSPORT_AGENCY
}

enum FacilityType {
  HOSPITAL
  NURSING_HOME
  CANCER_CENTER
  REHAB_FACILITY
  URGENT_CARE
  SPECIALTY_CLINIC
}

enum TransportLevel {
  BLS
  ALS
  CCT
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RequestStatus {
  PENDING
  SCHEDULED
  IN_TRANSIT
  COMPLETED
  CANCELLED
}

enum UnitStatus {
  AVAILABLE
  IN_USE
  OUT_OF_SERVICE
  MAINTENANCE
}

enum RouteType {
  FASTEST
  SHORTEST
  MOST_EFFICIENT
  LOWEST_COST
  SCENIC
}

enum RouteStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OPTIMIZED
  SUGGESTED
}

enum RouteOptimizationType {
  CHAINED_TRIPS
  RETURN_TRIP
  MULTI_STOP
  GEOGRAPHIC
  TEMPORAL
  REVENUE_MAX
}

enum StopType {
  PICKUP
  DROPOFF
  REFUEL
  REST
  EQUIPMENT
  TRANSFER
}

// New Enums for Advanced Transport Coordination
enum MultiPatientStatus {
  PLANNING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PatientTransportStatus {
  PENDING
  SCHEDULED
  IN_TRANSIT
  COMPLETED
  CANCELLED
}

enum LongDistanceStatus {
  PLANNING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  WEATHER_DELAYED
}

enum LegStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  DELAYED
  CANCELLED
}
