generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  password          String
  name              String?
  role              UserRole           @default(COORDINATOR)
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  routes            Route[]
  transportRequests TransportRequest[]
  multiPatientTransports MultiPatientTransport[]
  longDistanceTransports LongDistanceTransport[]
}

model Facility {
  id                  String             @id @default(cuid())
  name                String
  type                FacilityType
  address             String
  city                String
  state               String
  zipCode             String
  coordinates         Json?
  phone               String?
  email               String?
  operatingHours      Json?
  capabilities        Json?
  isActive            Boolean            @default(true)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  distanceMatrixFrom  DistanceMatrix[]   @relation("FromFacility")
  distanceMatrixTo    DistanceMatrix[]   @relation("ToFacility")
  routeStops          RouteStop[]
  destinationRequests TransportRequest[] @relation("DestinationFacility")
  originRequests      TransportRequest[] @relation("OriginFacility")
  patientTransportOrigins PatientTransport[] @relation("PatientTransportOrigin")
  patientTransportDestinations PatientTransport[] @relation("PatientTransportDestination")
  transportLegOrigins TransportLeg[] @relation("TransportLegOrigin")
  transportLegDestinations TransportLeg[] @relation("TransportLegDestination")
  emergencyDepartment EmergencyDepartment? @relation("FacilityEmergencyDepartment")
  demandPatterns      DemandPattern[]
  geofenceEvents      GeofenceEvent[]
}

model TransportRequest {
  id                     String           @id @default(cuid())
  patientId              String
  originFacilityId       String
  destinationFacilityId  String
  transportLevel         TransportLevel
  priority               Priority         @default(MEDIUM)
  status                 RequestStatus    @default(PENDING)
  specialRequirements    String?
  requestTimestamp       DateTime         @default(now())
  acceptedTimestamp      DateTime?
  pickupTimestamp        DateTime?
  completionTimestamp    DateTime?
  assignedAgencyId       String?
  assignedUnitId         String?
  createdById            String
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  routeOptimizationScore Float?
  chainingOpportunities  Json?
  timeFlexibility        Int?
  revenuePotential       Float?
  routeStops             RouteStop[]
  assignedAgency         TransportAgency? @relation(fields: [assignedAgencyId], references: [id])
  assignedUnit           Unit?            @relation(fields: [assignedUnitId], references: [id])
  createdBy              User             @relation(fields: [createdById], references: [id])
  destinationFacility    Facility         @relation("DestinationFacility", fields: [destinationFacilityId], references: [id])
  originFacility         Facility         @relation("OriginFacility", fields: [originFacilityId], references: [id])
  routes                 Route[]          @relation("RouteToTransportRequest")
  airMedicalTransports   AirMedicalTransport[]
  groundTransportCoordination GroundTransportCoordination[]
  transportQueues        TransportQueue[]
  transportBids          TransportBid[]
  unitAssignments        UnitAssignment[]
}

model TransportAgency {
  id                String             @id @default(cuid())
  name              String
  contactName       String?
  phone             String
  email             String
  address           String
  city              String
  state             String
  zipCode           String
  serviceArea       Json?
  operatingHours    Json?
  capabilities      Json?
  pricingStructure  Json?
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  routes            Route[]
  transportRequests TransportRequest[]
  units             Unit[]
  multiPatientTransports MultiPatientTransport[]
  longDistanceTransports LongDistanceTransport[]
  providerForecasts ProviderForecast[]
  assignedTransportQueues TransportQueue[]
  agencyUsers       AgencyUser[]
  agencyProfiles    AgencyProfile[]
  serviceAreas      ServiceArea[]
  agencyPerformance AgencyPerformance[]
  transportBids     TransportBid[]
}

model Unit {
  id                String             @id @default(cuid())
  agencyId          String
  unitNumber        String
  type              TransportLevel
  capabilities      Json?
  currentStatus     UnitStatus         @default(AVAILABLE)
  currentLocation   Json?
  shiftStart        DateTime?
  shiftEnd          DateTime?
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  routes            Route[]
  transportRequests TransportRequest[]
  multiPatientTransports MultiPatientTransport[]
  longDistanceTransports LongDistanceTransport[]
  agency            TransportAgency    @relation(fields: [agencyId], references: [id])
  transportQueues   TransportQueue[]
  unitAssignments   UnitAssignment[]
  unitAvailability  UnitAvailability[]
  gpsTracking       GPSTracking[]
}

model DistanceMatrix {
  id                   String    @id @default(cuid())
  fromFacilityId       String
  toFacilityId         String
  distanceMiles        Float
  estimatedTimeMinutes Int
  trafficFactor        Float     @default(1.0)
  tolls                Float     @default(0.0)
  fuelEfficiency       Float?
  routeType            RouteType @default(FASTEST)
  lastUpdated          DateTime  @default(now())
  fromFacility         Facility  @relation("FromFacility", fields: [fromFacilityId], references: [id])
  toFacility           Facility  @relation("ToFacility", fields: [toFacilityId], references: [id])

  @@unique([fromFacilityId, toFacilityId])
}

model Route {
  id                       String                 @id @default(cuid())
  routeNumber              String                 @unique
  agencyId                 String
  assignedUnitId           String?
  status                   RouteStatus            @default(PLANNED)
  totalDistanceMiles       Float
  estimatedTimeMinutes     Int
  emptyMilesReduction      Float?
  revenueOptimizationScore Float?
  chainedTripCount         Int                    @default(0)
  estimatedRevenue         Float?
  plannedStartTime         DateTime?
  actualStartTime          DateTime?
  completionTime           DateTime?
  timeWindowStart          DateTime?
  timeWindowEnd            DateTime?
  optimizationType         RouteOptimizationType?
  milesSaved               Float?
  unitsSaved               Int?
  createdById              String
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  agency                   TransportAgency        @relation(fields: [agencyId], references: [id])
  assignedUnit             Unit?                  @relation(fields: [assignedUnitId], references: [id])
  createdBy                User                   @relation(fields: [createdById], references: [id])
  routeStops               RouteStop[]
  transportRequests        TransportRequest[]     @relation("RouteToTransportRequest")
  routeDeviations          RouteDeviation[]
}

model RouteStop {
  id                       String                @id @default(cuid())
  routeId                  String
  stopOrder                Int
  facilityId               String
  transportRequestId       String?
  multiPatientTransportId  String?
  stopType                 StopType
  estimatedArrival         DateTime?
  actualArrival            DateTime?
  estimatedDeparture       DateTime?
  actualDeparture          DateTime?
  stopDuration             Int?
  notes                    String?
  facility                 Facility              @relation(fields: [facilityId], references: [id])
  route                    Route                 @relation(fields: [routeId], references: [id])
  transportRequest         TransportRequest?     @relation(fields: [transportRequestId], references: [id])
  multiPatientTransport    MultiPatientTransport? @relation(fields: [multiPatientTransportId], references: [id])

  @@unique([routeId, stopOrder])
}

// Multi-Patient Transport Models
model MultiPatientTransport {
  id                   String                @id @default(cuid())
  batchNumber          String                @unique
  coordinatorId        String
  status               MultiPatientStatus    @default(PLANNING)
  totalPatients        Int
  totalDistance        Float
  estimatedDuration    Int
  plannedStartTime     DateTime
  plannedEndTime       DateTime
  assignedAgencyId     String?
  assignedUnitId       String?
  routeOptimizationScore Float?
  costSavings          Float?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  coordinator          User                  @relation(fields: [coordinatorId], references: [id])
  assignedAgency       TransportAgency?      @relation(fields: [assignedAgencyId], references: [id])
  assignedUnit         Unit?                 @relation(fields: [assignedUnitId], references: [id])
  patientTransports    PatientTransport[]
  routeStops           RouteStop[]
  weatherUpdates       WeatherUpdate[]
  airMedicalTransports AirMedicalTransport[]
}

model PatientTransport {
  id                       String                  @id @default(cuid())
  multiPatientTransportId  String
  patientId                String
  originFacilityId         String
  destinationFacilityId    String
  transportLevel           TransportLevel
  priority                 Priority                @default(MEDIUM)
  specialRequirements      String?
  sequenceOrder            Int
  estimatedPickupTime      DateTime
  estimatedDropoffTime     DateTime
  actualPickupTime         DateTime?
  actualDropoffTime        DateTime?
  status                   PatientTransportStatus  @default(PENDING)
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  multiPatientTransport    MultiPatientTransport   @relation(fields: [multiPatientTransportId], references: [id])
  originFacility           Facility                @relation("PatientTransportOrigin", fields: [originFacilityId], references: [id])
  destinationFacility      Facility                @relation("PatientTransportDestination", fields: [destinationFacilityId], references: [id])
}

// Long-Distance Transport Models
model LongDistanceTransport {
  id                   String                @id @default(cuid())
  transportNumber      String                @unique
  coordinatorId        String
  status               LongDistanceStatus    @default(PLANNING)
  totalDistance        Float
  estimatedDuration    Int
  plannedStartTime     DateTime
  plannedEndTime       DateTime
  isMultiLeg           Boolean               @default(false)
  legCount             Int
  assignedAgencyId     String?
  assignedUnitId       String?
  costEstimate         Float
  revenuePotential     Float
  weatherConditions    Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  coordinator          User                  @relation(fields: [coordinatorId], references: [id])
  assignedAgency       TransportAgency?      @relation(fields: [assignedAgencyId], references: [id])
  assignedUnit         Unit?                 @relation(fields: [assignedUnitId], references: [id])
  transportLegs        TransportLeg[]
  weatherUpdates       WeatherUpdate[]
  airMedicalTransports AirMedicalTransport[]
}

model TransportLeg {
  id                       String                @id @default(cuid())
  longDistanceTransportId  String
  legNumber                Int
  originFacilityId         String
  destinationFacilityId    String
  distance                 Float
  estimatedDuration        Int
  plannedStartTime         DateTime
  plannedEndTime           DateTime
  actualStartTime          DateTime?
  actualEndTime            DateTime?
  status                   LegStatus             @default(PLANNED)
  patientId                String?
  transportLevel           TransportLevel
  specialRequirements      String?
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  longDistanceTransport    LongDistanceTransport @relation(fields: [longDistanceTransportId], references: [id])
  originFacility           Facility              @relation("TransportLegOrigin", fields: [originFacilityId], references: [id])
  destinationFacility      Facility              @relation("TransportLegDestination", fields: [destinationFacilityId], references: [id])
}

model WeatherUpdate {
  id                    String            @id @default(cuid())
  location              String
  weatherConditions     WeatherConditions
  temperature           Float
  windSpeed             Float
  windDirection         String
  visibility            Float
  precipitation         Float
  cloudCover            Int
  updatedAt             DateTime          @default(now())
  multiPatientTransport MultiPatientTransport? @relation(fields: [multiPatientTransportId], references: [id])
  longDistanceTransport LongDistanceTransport? @relation(fields: [longDistanceTransportId], references: [id])
  multiPatientTransportId String?
  longDistanceTransportId String?
}

// Air Medical Integration Models
model AirMedicalResource {
  id                    String              @id @default(cuid())
  resourceType          AirMedicalType
  identifier            String              @unique
  baseLocation          String
  serviceArea           Json
  capabilities          Json
  crewSize              Int
  maxRange             Float
  maxPayload           Float
  weatherMinimums      Json
  operatingHours       Json
  contactInfo          Json
  isActive             Boolean             @default(true)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  airMedicalTransports AirMedicalTransport[]
  weatherAlerts        WeatherAlert[]
}

model AirMedicalTransport {
  id                    String              @id @default(cuid())
  transportRequestId    String?
  multiPatientTransportId String?
  longDistanceTransportId String?
  airMedicalResourceId  String
  status                AirMedicalStatus   @default(PLANNING)
  flightPlan            Json
  weatherConditions     WeatherConditions
  estimatedDeparture    DateTime
  estimatedArrival      DateTime
  actualDeparture       DateTime?
  actualArrival         DateTime?
  groundingReason       String?
  weatherDelay          Boolean            @default(false)
  crewNotes             String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  transportRequest      TransportRequest?  @relation(fields: [transportRequestId], references: [id])
  multiPatientTransport MultiPatientTransport? @relation(fields: [multiPatientTransportId], references: [id])
  longDistanceTransport LongDistanceTransport? @relation(fields: [longDistanceTransportId], references: [id])
  airMedicalResource    AirMedicalResource @relation(fields: [airMedicalResourceId], references: [id])
  weatherAlerts         WeatherAlert[]
  groundTransportCoordination GroundTransportCoordination[]
}

model WeatherAlert {
  id                    String              @id @default(cuid())
  alertType             WeatherAlertType
  severity              AlertSeverity
  location              String
  description           String
  startTime             DateTime
  endTime               DateTime
  impact                String
  recommendations       String
  isActive              Boolean            @default(true)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  airMedicalResources   AirMedicalResource[]
  airMedicalTransports  AirMedicalTransport[]
}

model GroundTransportCoordination {
  id                    String              @id @default(cuid())
  airMedicalTransportId String
  groundTransportId     String?
  coordinationType      CoordinationType
  status                CoordinationStatus @default(PENDING)
  handoffLocation       String
  handoffTime           DateTime?
  handoffNotes          String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  airMedicalTransport   AirMedicalTransport @relation(fields: [airMedicalTransportId], references: [id])
  groundTransport       TransportRequest?  @relation(fields: [groundTransportId], references: [id])
}

// Emergency Department Optimization Models (Phase 2.7)
model EmergencyDepartment {
  id                    String              @id @default(cuid())
  facilityId            String              @unique
  name                  String
  totalBeds             Int
  availableBeds         Int
  occupiedBeds          Int
  hallwayBeds           Int
  criticalBeds          Int
  capacityThreshold     Int                 @default(80)
  currentCensus         Int
  transportQueueLength  Int                 @default(0)
  averageWaitTime       Int                 @default(0)
  peakHours             Json?
  isActive              Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  facility              Facility            @relation("FacilityEmergencyDepartment", fields: [facilityId], references: [id])
  bedStatusUpdates      BedStatusUpdate[]
  transportQueues       TransportQueue[]
  capacityAlerts        CapacityAlert[]
}

model BedStatusUpdate {
  id                    String              @id @default(cuid())
  emergencyDepartmentId String
  updateType            BedUpdateType
  bedCount              Int
  updateReason          String?
  notes                 String?
  updatedBy             String?
  createdAt             DateTime            @default(now())
  emergencyDepartment   EmergencyDepartment @relation(fields: [emergencyDepartmentId], references: [id])
}

model TransportQueue {
  id                    String              @id @default(cuid())
  emergencyDepartmentId String
  transportRequestId    String
  queuePosition         Int
  priority              Priority            @default(MEDIUM)
  waitTime              Int                 @default(0)
  estimatedWaitTime     Int?
  status                QueueStatus         @default(WAITING)
  assignedProviderId    String?
  assignedUnitId        String?
  queueTimestamp        DateTime            @default(now())
  assignedTimestamp     DateTime?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  emergencyDepartment   EmergencyDepartment @relation(fields: [emergencyDepartmentId], references: [id])
  transportRequest      TransportRequest    @relation(fields: [transportRequestId], references: [id])
  assignedProvider      TransportAgency?   @relation(fields: [assignedProviderId], references: [id])
  assignedUnit          Unit?               @relation(fields: [assignedUnitId], references: [id])
}

model CapacityAlert {
  id                    String              @id @default(cuid())
  emergencyDepartmentId String
  alertType             CapacityAlertType
  severity              AlertSeverity
  message               String
  threshold             Int
  currentValue          Int
  isActive              Boolean             @default(true)
  acknowledgedBy        String?
  acknowledgedAt        DateTime?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  emergencyDepartment   EmergencyDepartment @relation(fields: [emergencyDepartmentId], references: [id])
}

model ProviderForecast {
  id                    String              @id @default(cuid())
  agencyId              String
  forecastDate          DateTime
  forecastType          ForecastType
  predictedDemand       Int
  availableCapacity     Int
  capacityUtilization   Float
  confidence            Float               @default(0.8)
  factors               Json?
  recommendations       String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  agency                TransportAgency     @relation(fields: [agencyId], references: [id])
}

model DemandPattern {
  id                    String              @id @default(cuid())
  facilityId            String
  patternType           PatternType
  dayOfWeek             Int?
  hourOfDay             Int?
  averageDemand         Float
  peakDemand            Float
  seasonalFactor        Float               @default(1.0)
  trendDirection        TrendDirection
  confidence            Float               @default(0.8)
  dataPoints            Int                 @default(0)
  lastUpdated           DateTime            @default(now())
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  facility              Facility            @relation(fields: [facilityId], references: [id])
}

// Agency Portal Models (Phase 3.1)
model AgencyUser {
  id                String             @id @default(cuid())
  agencyId          String
  email             String             @unique
  password          String
  name              String
  role              AgencyUserRole     @default(STAFF)
  phone             String?
  isActive          Boolean            @default(true)
  lastLogin         DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  agency            TransportAgency    @relation(fields: [agencyId], references: [id])
  unitAssignments   UnitAssignment[]
  transportBids     TransportBid[]
}

model AgencyProfile {
  id                    String             @id @default(cuid())
  agencyId              String             @unique
  description           String?
  website               String?
  licenseNumber         String?
  insuranceInfo         Json?
  certifications        Json?
  specializations       Json?
  emergencyProcedures   Json?
  contactPerson         String?
  emergencyContact      String?
  emergencyPhone        String?
  serviceAreaNotes      String?
  operatingNotes        String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  agency                TransportAgency    @relation(fields: [agencyId], references: [id])
}

model UnitAvailability {
  id                String             @id @default(cuid())
  unitId            String
  status            UnitStatus         @default(AVAILABLE)
  location          Json?
  shiftStart        DateTime?
  shiftEnd          DateTime?
  crewMembers       Json?
  currentAssignment String?
  notes             String?
  lastUpdated       DateTime           @default(now())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  unit              Unit               @relation(fields: [unitId], references: [id])
  unitAssignments   UnitAssignment[]
}

model UnitAssignment {
  id                    String             @id @default(cuid())
  unitId                String
  unitAvailabilityId    String
  transportRequestId    String?
  assignmentType        AssignmentType
  startTime             DateTime
  endTime               DateTime?
  status                AssignmentStatus   @default(ACTIVE)
  notes                 String?
  assignedBy            String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  unit                  Unit               @relation(fields: [unitId], references: [id])
  unitAvailability      UnitAvailability   @relation(fields: [unitAvailabilityId], references: [id])
  transportRequest      TransportRequest?  @relation(fields: [transportRequestId], references: [id])
  assignedByUser        AgencyUser?        @relation(fields: [assignedBy], references: [id])
}

model TransportBid {
  id                    String             @id @default(cuid())
  transportRequestId    String
  agencyId              String
  agencyUserId          String
  bidAmount             Float?
  estimatedArrival      DateTime?
  unitType              TransportLevel
  specialCapabilities   Json?
  notes                 String?
  status                BidStatus          @default(PENDING)
  submittedAt           DateTime           @default(now())
  reviewedAt            DateTime?
  reviewedBy            String?
  reviewNotes           String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  transportRequest      TransportRequest   @relation(fields: [transportRequestId], references: [id])
  agency                TransportAgency    @relation(fields: [agencyId], references: [id])
  agencyUser            AgencyUser        @relation(fields: [agencyUserId], references: [id])
}

model ServiceArea {
  id                    String             @id @default(cuid())
  agencyId              String
  name                  String
  description           String?
  geographicBoundaries  Json
  coverageRadius        Float?
  primaryServiceArea    Boolean            @default(false)
  operatingHours        Json?
  specialRestrictions   String?
  isActive              Boolean            @default(true)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  agency                TransportAgency    @relation(fields: [agencyId], references: [id])
}

model AgencyPerformance {
  id                    String             @id @default(cuid())
  agencyId              String
  periodStart           DateTime
  periodEnd             DateTime
  totalTransports       Int                @default(0)
  completedTransports   Int                @default(0)
  cancelledTransports   Int                @default(0)
  averageResponseTime   Int?
  totalMiles            Float              @default(0)
  revenueGenerated      Float              @default(0)
  customerSatisfaction  Float?
  onTimePercentage      Float?
  safetyIncidents       Int                @default(0)
  notes                 String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  agency                TransportAgency    @relation(fields: [agencyId], references: [id])
}

// Real-time Tracking Models (Phase 6.1)
model GPSTracking {
  id                String             @id @default(cuid())
  unitId            String
  latitude          Float
  longitude         Float
  altitude          Float?
  speed             Float?             // Speed in mph
  heading           Float?             // Direction in degrees
  accuracy          Float?             // GPS accuracy in meters
  timestamp         DateTime           @default(now())
  isActive          Boolean            @default(true)
  batteryLevel      Float?             // Unit battery level
  signalStrength    Float?             // Signal strength
  locationType      LocationType       @default(GPS)
  source            LocationSource     @default(UNIT_DEVICE)
  unit              Unit               @relation(fields: [unitId], references: [id])
  locationHistory   LocationHistory[]
  geofenceEvents    GeofenceEvent[]
  routeDeviations   RouteDeviation[]
  etaUpdates        ETAUpdate[]

  @@index([unitId, timestamp])
  @@index([timestamp])
}

model LocationHistory {
  id                String             @id @default(cuid())
  gpsTrackingId     String
  latitude          Float
  longitude         Float
  altitude          Float?
  speed             Float?
  heading           Float?
  accuracy          Float?
  timestamp         DateTime           @default(now())
  locationType      LocationType       @default(GPS)
  source            LocationSource     @default(UNIT_DEVICE)
  gpsTracking       GPSTracking        @relation(fields: [gpsTrackingId], references: [id])

  @@index([gpsTrackingId, timestamp])
  @@index([timestamp])
}

model GeofenceEvent {
  id                String             @id @default(cuid())
  gpsTrackingId     String
  facilityId        String?
  geofenceType      GeofenceType
  eventType         GeofenceEventType
  latitude          Float
  longitude         Float
  radius            Float              // Geofence radius in meters
  timestamp         DateTime           @default(now())
  isActive          Boolean            @default(true)
  notes             String?
  gpsTracking       GPSTracking        @relation(fields: [gpsTrackingId], references: [id])
  facility          Facility?          @relation(fields: [facilityId], references: [id])

  @@index([gpsTrackingId, timestamp])
  @@index([facilityId, timestamp])
}

model RouteDeviation {
  id                String             @id @default(cuid())
  gpsTrackingId     String
  routeId           String?
  deviationType     DeviationType
  severity          AlertSeverity
  description       String
  currentLatitude   Float
  currentLongitude  Float
  expectedLatitude  Float
  expectedLongitude Float
  distanceOffRoute  Float              // Distance off route in meters
  timestamp         DateTime           @default(now())
  isResolved        Boolean            @default(false)
  resolvedAt        DateTime?
  resolvedBy        String?
  resolutionNotes   String?
  gpsTracking       GPSTracking        @relation(fields: [gpsTrackingId], references: [id])
  route             Route?             @relation(fields: [routeId], references: [id])

  @@index([gpsTrackingId, timestamp])
  @@index([routeId, timestamp])
}

model ETAUpdate {
  id                String             @id @default(cuid())
  gpsTrackingId     String
  destinationId     String             // Facility or location ID
  destinationType   DestinationType
  currentETA        DateTime
  previousETA       DateTime?
  trafficFactor     Float              @default(1.0)
  weatherFactor     Float              @default(1.0)
  routeConditions   Json?              // Current route conditions
  timestamp         DateTime           @default(now())
  isActive          Boolean            @default(true)
  gpsTracking       GPSTracking        @relation(fields: [gpsTrackingId], references: [id])

  @@index([gpsTrackingId, timestamp])
  @@index([destinationId, timestamp])
}

model TrafficCondition {
  id                String             @id @default(cuid())
  location          String             // Geographic area or route segment
  severity          TrafficSeverity
  description       String
  startTime         DateTime
  endTime           DateTime?
  impactFactor      Float              @default(1.0) // 1.0 = no impact, 2.0 = doubles travel time
  affectedRoutes    Json?              // Routes affected by this condition
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([location, startTime])
  @@index([isActive])
}

model WeatherImpact {
  id                String             @id @default(cuid())
  location          String             // Geographic area
  weatherType       WeatherConditions
  impactLevel       WeatherImpactLevel
  description       String
  startTime         DateTime
  endTime           DateTime?
  travelDelayFactor Float              @default(1.0) // Multiplier for travel time
  affectedAreas     Json?              // Geographic areas affected
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([location, startTime])
  @@index([isActive])
}

enum UserRole {
  ADMIN
  COORDINATOR
  BILLING_STAFF
  TRANSPORT_AGENCY
}

enum FacilityType {
  HOSPITAL
  NURSING_HOME
  CANCER_CENTER
  REHAB_FACILITY
  URGENT_CARE
  SPECIALTY_CLINIC
}

enum TransportLevel {
  BLS
  ALS
  CCT
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RequestStatus {
  PENDING
  SCHEDULED
  IN_TRANSIT
  COMPLETED
  CANCELLED
}

enum UnitStatus {
  AVAILABLE
  IN_USE
  OUT_OF_SERVICE
  MAINTENANCE
}

enum RouteType {
  FASTEST
  SHORTEST
  MOST_EFFICIENT
  LOWEST_COST
  SCENIC
}

enum RouteStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OPTIMIZED
  SUGGESTED
}

enum RouteOptimizationType {
  CHAINED_TRIPS
  RETURN_TRIP
  MULTI_STOP
  GEOGRAPHIC
  TEMPORAL
  REVENUE_MAX
}

enum StopType {
  PICKUP
  DROPOFF
  REFUEL
  REST
  EQUIPMENT
  TRANSFER
}

// New Enums for Advanced Transport Coordination
enum MultiPatientStatus {
  PLANNING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PatientTransportStatus {
  PENDING
  SCHEDULED
  IN_TRANSIT
  COMPLETED
  CANCELLED
}

enum LongDistanceStatus {
  PLANNING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  WEATHER_DELAYED
}

enum LegStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  DELAYED
  CANCELLED
}

// Weather Conditions Enum
enum WeatherConditions {
  CLEAR
  PARTLY_CLOUDY
  CLOUDY
  RAIN
  SNOW
  FOG
  THUNDERSTORMS
  HIGH_WINDS
  ICING
  TURBULENCE
}

// Air Medical Integration Enums
enum AirMedicalType {
  HELICOPTER
  FIXED_WING
  JET
  TURBOPROP
}

enum AirMedicalStatus {
  PLANNING
  SCHEDULED
  IN_FLIGHT
  LANDED
  COMPLETED
  CANCELLED
  GROUNDED
  WEATHER_DELAYED
  MAINTENANCE
}

enum WeatherAlertType {
  TURBULENCE
  LOW_VISIBILITY
  HIGH_WINDS
  ICING
  THUNDERSTORMS
  SNOW
  FOG
  VOLCANIC_ASH
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum CoordinationType {
  HANDOFF
  ESCORT
  BACKUP
  RELAY
  INTERCEPT
}

enum CoordinationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

enum BedUpdateType {
  BED_ADDED
  BED_REMOVED
  BED_OCCUPIED
  BED_VACATED
  HALLWAY_BED_ADDED
  HALLWAY_BED_REMOVED
  CRITICAL_BED_UPDATE
}

enum QueueStatus {
  WAITING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ESCALATED
}

enum CapacityAlertType {
  BED_CAPACITY
  HALLWAY_BED_THRESHOLD
  TRANSPORT_QUEUE_LENGTH
  WAIT_TIME_THRESHOLD
  CRITICAL_BED_SHORTAGE
}

enum ForecastType {
  DAILY
  WEEKLY
  MONTHLY
  SEASONAL
  EVENT_BASED
}

enum PatternType {
  DAILY
  WEEKLY
  MONTHLY
  SEASONAL
  EVENT_DRIVEN
}

enum TrendDirection {
  INCREASING
  DECREASING
  STABLE
  CYCLICAL
  UNKNOWN
}

// New Enums for Agency Portal
enum AgencyUserRole {
  ADMIN
  STAFF
  BILLING_STAFF
}

enum AssignmentType {
  PRIMARY
  SECONDARY
  SUPPLEMENTAL
}

enum AssignmentStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  CANCELLED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
  WITHDRAWN
}

// Real-time Tracking Enums (Phase 6.1)
enum LocationType {
  GPS
  CELLULAR
  WIFI
  MANUAL
  ESTIMATED
}

enum LocationSource {
  UNIT_DEVICE
  MOBILE_APP
  CAD_SYSTEM
  MANUAL_ENTRY
  ESTIMATION
}

enum GeofenceType {
  FACILITY_ARRIVAL
  FACILITY_DEPARTURE
  SERVICE_AREA
  RESTRICTED_AREA
  CUSTOM
}

enum GeofenceEventType {
  ENTERED
  EXITED
  APPROACHING
  DEPARTING
}

enum DeviationType {
  ROUTE_DEVIATION
  SPEED_VIOLATION
  STOPPED_UNEXPECTEDLY
  WRONG_DIRECTION
  OFF_ROUTE
}

enum DestinationType {
  FACILITY
  PICKUP_LOCATION
  DROPOFF_LOCATION
  WAYPOINT
  CUSTOM
}

enum TrafficSeverity {
  NONE
  LIGHT
  MODERATE
  HEAVY
  SEVERE
}

enum WeatherImpactLevel {
  NONE
  MINIMAL
  MODERATE
  SIGNIFICANT
  SEVERE
}

// New Enums for Real-time Tracking Models (Phase 6.1)
enum GPSTrackingStatus {
  ACTIVE
  INACTIVE
  ERROR
  OFFLINE
}

enum ETAUpdateStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  CANCELLED
}

enum RouteDeviationStatus {
  UNRESOLVED
  RESOLVED
  IGNORED
}

enum LocationHistorySource {
  UNIT_DEVICE
  MOBILE_APP
  CAD_SYSTEM
  MANUAL_ENTRY
}

enum LocationHistoryType {
  GPS
  CELLULAR
  WIFI
  MANUAL
}

enum GeofenceEventStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}
