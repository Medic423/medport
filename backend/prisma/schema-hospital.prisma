// Hospital Database Schema (Port 5432)
// Contains all trips, hospital users, facilities

generator client {
  provider = "prisma-client-js"
  output   = "../dist/prisma/hospital"
}

datasource db {
  provider = "postgresql"
  url      = env("HOSPITAL_DATABASE_URL")
}

// Hospital-specific data
model HospitalUser {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  role        UserRole @default(COORDINATOR)
  hospitalName String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  transportRequests TransportRequest[] @relation("HospitalRequests")
  createdRequests TransportRequest[] @relation("CreatedRequests")
  hospitalFacilities HospitalFacility[]
  agencyPreferences HospitalAgencyPreference[]

  @@map("hospital_users")
}

model HospitalFacility {
  id            String   @id @default(cuid())
  hospitalId    String
  name          String
  type          String
  address       String
  city          String
  state         String
  zipCode       String
  coordinates   Json?    // { lat: number, lng: number }
  phone         String?
  email         String?
  operatingHours String?
  capabilities  String[]
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  hospitalUser HospitalUser @relation(fields: [hospitalId], references: [id])

  @@map("hospital_facilities")
}

// General facility model (used by transport requests)
model Facility {
  id                  String             @id @default(cuid())
  name                String
  type                FacilityType
  address             String
  city                String
  state               String
  zipCode             String
  coordinates         Json?
  phone               String?
  email               String?
  operatingHours      Json?
  capabilities        Json?
  isActive            Boolean            @default(true)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  // Relations
  destinationRequests TransportRequest[] @relation("DestinationFacility")
  originRequests      TransportRequest[] @relation("OriginFacility")

  @@map("facilities")
}

model TransportRequest {
  id                     String           @id @default(cuid())
  hospitalId             String
  patientId              String
  originFacilityId       String
  destinationFacilityId  String
  transportLevel         TransportLevel
  priority               Priority         @default(MEDIUM)
  status                 RequestStatus    @default(PENDING)
  specialRequirements    String?
  requestTimestamp       DateTime         @default(now())
  acceptedTimestamp      DateTime?
  pickupTimestamp        DateTime?
  completionTimestamp    DateTime?
  assignedAgencyId       String?
  assignedUnitId         String?
  createdById            String
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  routeOptimizationScore Float?
  chainingOpportunities  Json?
  timeFlexibility        Int?
  revenuePotential       Float?
  // ETA tracking fields
  estimatedArrivalTime   DateTime?
  estimatedPickupTime    DateTime?
  etaUpdates            Json?            // Array of ETA updates with timestamps
  cancellationReason    String?          // Reason for cancellation

  // Relations
  hospitalUser HospitalUser @relation("HospitalRequests", fields: [hospitalId], references: [id])
  originFacility Facility @relation("OriginFacility", fields: [originFacilityId], references: [id])
  destinationFacility Facility @relation("DestinationFacility", fields: [destinationFacilityId], references: [id])
  createdBy HospitalUser @relation("CreatedRequests", fields: [createdById], references: [id])
  agencyPreferences HospitalAgencyPreference[]

  @@map("transport_requests")
}

model HospitalAgencyPreference {
  id              String   @id @default(cuid())
  hospitalId      String
  agencyId        String   // Reference to EMS agency in Center DB
  isActive        Boolean  @default(true)
  preferenceOrder Int      @default(0)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  hospitalUser HospitalUser @relation(fields: [hospitalId], references: [id])
  transportRequests TransportRequest[]

  @@map("hospital_agency_preferences")
}

// Enums
enum TransportLevel {
  BLS
  ALS
  CCT
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RequestStatus {
  PENDING
  SCHEDULED
  IN_TRANSIT
  COMPLETED
  CANCELLED
}

enum UserRole {
  ADMIN
  COORDINATOR
  BILLING_STAFF
  TRANSPORT_AGENCY
}

enum FacilityType {
  HOSPITAL
  NURSING_HOME
  CANCER_CENTER
  REHAB_FACILITY
  URGENT_CARE
  SPECIALTY_CLINIC
}

